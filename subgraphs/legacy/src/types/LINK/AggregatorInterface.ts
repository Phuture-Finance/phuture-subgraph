// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddedAccess extends ethereum.Event {
  get params(): AddedAccess__Params {
    return new AddedAccess__Params(this);
  }
}

export class AddedAccess__Params {
  _event: AddedAccess;

  constructor(event: AddedAccess) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AnswerUpdated extends ethereum.Event {
  get params(): AnswerUpdated__Params {
    return new AnswerUpdated__Params(this);
  }
}

export class AnswerUpdated__Params {
  _event: AnswerUpdated;

  constructor(event: AnswerUpdated) {
    this._event = event;
  }

  get current(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get roundId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get updatedAt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BillingAccessControllerSet extends ethereum.Event {
  get params(): BillingAccessControllerSet__Params {
    return new BillingAccessControllerSet__Params(this);
  }
}

export class BillingAccessControllerSet__Params {
  _event: BillingAccessControllerSet;

  constructor(event: BillingAccessControllerSet) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get current(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BillingSet extends ethereum.Event {
  get params(): BillingSet__Params {
    return new BillingSet__Params(this);
  }
}

export class BillingSet__Params {
  _event: BillingSet;

  constructor(event: BillingSet) {
    this._event = event;
  }

  get maximumGasPrice(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reasonableGasPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get microLinkPerEth(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get linkGweiPerObservation(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get linkGweiPerTransmission(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CheckAccessDisabled extends ethereum.Event {
  get params(): CheckAccessDisabled__Params {
    return new CheckAccessDisabled__Params(this);
  }
}

export class CheckAccessDisabled__Params {
  _event: CheckAccessDisabled;

  constructor(event: CheckAccessDisabled) {
    this._event = event;
  }
}

export class CheckAccessEnabled extends ethereum.Event {
  get params(): CheckAccessEnabled__Params {
    return new CheckAccessEnabled__Params(this);
  }
}

export class CheckAccessEnabled__Params {
  _event: CheckAccessEnabled;

  constructor(event: CheckAccessEnabled) {
    this._event = event;
  }
}

export class ConfigSet extends ethereum.Event {
  get params(): ConfigSet__Params {
    return new ConfigSet__Params(this);
  }
}

export class ConfigSet__Params {
  _event: ConfigSet;

  constructor(event: ConfigSet) {
    this._event = event;
  }

  get previousConfigBlockNumber(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get configCount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get signers(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get transmitters(): Array<Address> {
    return this._event.parameters[3].value.toAddressArray();
  }

  get threshold(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get encodedConfigVersion(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get encoded(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }
}

export class NewRound extends ethereum.Event {
  get params(): NewRound__Params {
    return new NewRound__Params(this);
  }
}

export class NewRound__Params {
  _event: NewRound;

  constructor(event: NewRound) {
    this._event = event;
  }

  get roundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get startedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get startedAt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewTransmission extends ethereum.Event {
  get params(): NewTransmission__Params {
    return new NewTransmission__Params(this);
  }
}

export class NewTransmission__Params {
  _event: NewTransmission;

  constructor(event: NewTransmission) {
    this._event = event;
  }

  get aggregatorRoundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get answer(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get transmitter(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get observations(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get observers(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get rawReportContext(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class OraclePaid extends ethereum.Event {
  get params(): OraclePaid__Params {
    return new OraclePaid__Params(this);
  }
}

export class OraclePaid__Params {
  _event: OraclePaid;

  constructor(event: OraclePaid) {
    this._event = event;
  }

  get transmitter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get payee(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferRequested extends ethereum.Event {
  get params(): OwnershipTransferRequested__Params {
    return new OwnershipTransferRequested__Params(this);
  }
}

export class OwnershipTransferRequested__Params {
  _event: OwnershipTransferRequested;

  constructor(event: OwnershipTransferRequested) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PayeeshipTransferRequested extends ethereum.Event {
  get params(): PayeeshipTransferRequested__Params {
    return new PayeeshipTransferRequested__Params(this);
  }
}

export class PayeeshipTransferRequested__Params {
  _event: PayeeshipTransferRequested;

  constructor(event: PayeeshipTransferRequested) {
    this._event = event;
  }

  get transmitter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get current(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get proposed(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class PayeeshipTransferred extends ethereum.Event {
  get params(): PayeeshipTransferred__Params {
    return new PayeeshipTransferred__Params(this);
  }
}

export class PayeeshipTransferred__Params {
  _event: PayeeshipTransferred;

  constructor(event: PayeeshipTransferred) {
    this._event = event;
  }

  get transmitter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get previous(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get current(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RemovedAccess extends ethereum.Event {
  get params(): RemovedAccess__Params {
    return new RemovedAccess__Params(this);
  }
}

export class RemovedAccess__Params {
  _event: RemovedAccess;

  constructor(event: RemovedAccess) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RequesterAccessControllerSet extends ethereum.Event {
  get params(): RequesterAccessControllerSet__Params {
    return new RequesterAccessControllerSet__Params(this);
  }
}

export class RequesterAccessControllerSet__Params {
  _event: RequesterAccessControllerSet;

  constructor(event: RequesterAccessControllerSet) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get current(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoundRequested extends ethereum.Event {
  get params(): RoundRequested__Params {
    return new RoundRequested__Params(this);
  }
}

export class RoundRequested__Params {
  _event: RoundRequested;

  constructor(event: RoundRequested) {
    this._event = event;
  }

  get requester(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get configDigest(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get epoch(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get round(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class ValidatorConfigSet extends ethereum.Event {
  get params(): ValidatorConfigSet__Params {
    return new ValidatorConfigSet__Params(this);
  }
}

export class ValidatorConfigSet__Params {
  _event: ValidatorConfigSet;

  constructor(event: ValidatorConfigSet) {
    this._event = event;
  }

  get previousValidator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get previousGasLimit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get currentValidator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get currentGasLimit(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class AggregatorInterface__getBillingResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class AggregatorInterface__getRoundDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class AggregatorInterface__latestConfigDetailsResult {
  value0: BigInt;
  value1: BigInt;
  value2: Bytes;

  constructor(value0: BigInt, value1: BigInt, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    return map;
  }
}

export class AggregatorInterface__latestRoundDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class AggregatorInterface__latestTransmissionDetailsResult {
  value0: Bytes;
  value1: BigInt;
  value2: i32;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Bytes,
    value1: BigInt,
    value2: i32,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromSignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class AggregatorInterface__validatorConfigResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class AggregatorInterface extends ethereum.SmartContract {
  static bind(address: Address): AggregatorInterface {
    return new AggregatorInterface("AggregatorInterface", address);
  }

  LINK(): Address {
    let result = super.call("LINK", "LINK():(address)", []);

    return result[0].toAddress();
  }

  try_LINK(): ethereum.CallResult<Address> {
    let result = super.tryCall("LINK", "LINK():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  billingAccessController(): Address {
    let result = super.call(
      "billingAccessController",
      "billingAccessController():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_billingAccessController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "billingAccessController",
      "billingAccessController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  checkEnabled(): boolean {
    let result = super.call("checkEnabled", "checkEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_checkEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("checkEnabled", "checkEnabled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  description(): string {
    let result = super.call("description", "description():(string)", []);

    return result[0].toString();
  }

  try_description(): ethereum.CallResult<string> {
    let result = super.tryCall("description", "description():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getAnswer(_roundId: BigInt): BigInt {
    let result = super.call("getAnswer", "getAnswer(uint256):(int256)", [
      ethereum.Value.fromUnsignedBigInt(_roundId)
    ]);

    return result[0].toBigInt();
  }

  try_getAnswer(_roundId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getAnswer", "getAnswer(uint256):(int256)", [
      ethereum.Value.fromUnsignedBigInt(_roundId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBilling(): AggregatorInterface__getBillingResult {
    let result = super.call(
      "getBilling",
      "getBilling():(uint32,uint32,uint32,uint32,uint32)",
      []
    );

    return new AggregatorInterface__getBillingResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getBilling(): ethereum.CallResult<AggregatorInterface__getBillingResult> {
    let result = super.tryCall(
      "getBilling",
      "getBilling():(uint32,uint32,uint32,uint32,uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AggregatorInterface__getBillingResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getRoundData(_roundId: BigInt): AggregatorInterface__getRoundDataResult {
    let result = super.call(
      "getRoundData",
      "getRoundData(uint80):(uint80,int256,uint256,uint256,uint80)",
      [ethereum.Value.fromUnsignedBigInt(_roundId)]
    );

    return new AggregatorInterface__getRoundDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getRoundData(
    _roundId: BigInt
  ): ethereum.CallResult<AggregatorInterface__getRoundDataResult> {
    let result = super.tryCall(
      "getRoundData",
      "getRoundData(uint80):(uint80,int256,uint256,uint256,uint80)",
      [ethereum.Value.fromUnsignedBigInt(_roundId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AggregatorInterface__getRoundDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getTimestamp(_roundId: BigInt): BigInt {
    let result = super.call("getTimestamp", "getTimestamp(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_roundId)
    ]);

    return result[0].toBigInt();
  }

  try_getTimestamp(_roundId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimestamp",
      "getTimestamp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_roundId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasAccess(_user: Address, _calldata: Bytes): boolean {
    let result = super.call("hasAccess", "hasAccess(address,bytes):(bool)", [
      ethereum.Value.fromAddress(_user),
      ethereum.Value.fromBytes(_calldata)
    ]);

    return result[0].toBoolean();
  }

  try_hasAccess(
    _user: Address,
    _calldata: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasAccess", "hasAccess(address,bytes):(bool)", [
      ethereum.Value.fromAddress(_user),
      ethereum.Value.fromBytes(_calldata)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  latestAnswer(): BigInt {
    let result = super.call("latestAnswer", "latestAnswer():(int256)", []);

    return result[0].toBigInt();
  }

  try_latestAnswer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("latestAnswer", "latestAnswer():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  latestConfigDetails(): AggregatorInterface__latestConfigDetailsResult {
    let result = super.call(
      "latestConfigDetails",
      "latestConfigDetails():(uint32,uint32,bytes16)",
      []
    );

    return new AggregatorInterface__latestConfigDetailsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBytes()
    );
  }

  try_latestConfigDetails(): ethereum.CallResult<
    AggregatorInterface__latestConfigDetailsResult
  > {
    let result = super.tryCall(
      "latestConfigDetails",
      "latestConfigDetails():(uint32,uint32,bytes16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AggregatorInterface__latestConfigDetailsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBytes()
      )
    );
  }

  latestRound(): BigInt {
    let result = super.call("latestRound", "latestRound():(uint256)", []);

    return result[0].toBigInt();
  }

  try_latestRound(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("latestRound", "latestRound():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  latestRoundData(): AggregatorInterface__latestRoundDataResult {
    let result = super.call(
      "latestRoundData",
      "latestRoundData():(uint80,int256,uint256,uint256,uint80)",
      []
    );

    return new AggregatorInterface__latestRoundDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_latestRoundData(): ethereum.CallResult<
    AggregatorInterface__latestRoundDataResult
  > {
    let result = super.tryCall(
      "latestRoundData",
      "latestRoundData():(uint80,int256,uint256,uint256,uint80)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AggregatorInterface__latestRoundDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  latestTimestamp(): BigInt {
    let result = super.call(
      "latestTimestamp",
      "latestTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_latestTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestTimestamp",
      "latestTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  latestTransmissionDetails(): AggregatorInterface__latestTransmissionDetailsResult {
    let result = super.call(
      "latestTransmissionDetails",
      "latestTransmissionDetails():(bytes16,uint32,uint8,int192,uint64)",
      []
    );

    return new AggregatorInterface__latestTransmissionDetailsResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_latestTransmissionDetails(): ethereum.CallResult<
    AggregatorInterface__latestTransmissionDetailsResult
  > {
    let result = super.tryCall(
      "latestTransmissionDetails",
      "latestTransmissionDetails():(bytes16,uint32,uint8,int192,uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AggregatorInterface__latestTransmissionDetailsResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  linkAvailableForPayment(): BigInt {
    let result = super.call(
      "linkAvailableForPayment",
      "linkAvailableForPayment():(int256)",
      []
    );

    return result[0].toBigInt();
  }

  try_linkAvailableForPayment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "linkAvailableForPayment",
      "linkAvailableForPayment():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxAnswer(): BigInt {
    let result = super.call("maxAnswer", "maxAnswer():(int192)", []);

    return result[0].toBigInt();
  }

  try_maxAnswer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxAnswer", "maxAnswer():(int192)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minAnswer(): BigInt {
    let result = super.call("minAnswer", "minAnswer():(int192)", []);

    return result[0].toBigInt();
  }

  try_minAnswer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minAnswer", "minAnswer():(int192)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracleObservationCount(_signerOrTransmitter: Address): i32 {
    let result = super.call(
      "oracleObservationCount",
      "oracleObservationCount(address):(uint16)",
      [ethereum.Value.fromAddress(_signerOrTransmitter)]
    );

    return result[0].toI32();
  }

  try_oracleObservationCount(
    _signerOrTransmitter: Address
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "oracleObservationCount",
      "oracleObservationCount(address):(uint16)",
      [ethereum.Value.fromAddress(_signerOrTransmitter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  owedPayment(_transmitter: Address): BigInt {
    let result = super.call("owedPayment", "owedPayment(address):(uint256)", [
      ethereum.Value.fromAddress(_transmitter)
    ]);

    return result[0].toBigInt();
  }

  try_owedPayment(_transmitter: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "owedPayment",
      "owedPayment(address):(uint256)",
      [ethereum.Value.fromAddress(_transmitter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  requestNewRound(): BigInt {
    let result = super.call(
      "requestNewRound",
      "requestNewRound():(uint80)",
      []
    );

    return result[0].toBigInt();
  }

  try_requestNewRound(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestNewRound",
      "requestNewRound():(uint80)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requesterAccessController(): Address {
    let result = super.call(
      "requesterAccessController",
      "requesterAccessController():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_requesterAccessController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "requesterAccessController",
      "requesterAccessController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  transmitters(): Array<Address> {
    let result = super.call("transmitters", "transmitters():(address[])", []);

    return result[0].toAddressArray();
  }

  try_transmitters(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "transmitters",
      "transmitters():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  typeAndVersion(): string {
    let result = super.call("typeAndVersion", "typeAndVersion():(string)", []);

    return result[0].toString();
  }

  try_typeAndVersion(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "typeAndVersion",
      "typeAndVersion():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  validatorConfig(): AggregatorInterface__validatorConfigResult {
    let result = super.call(
      "validatorConfig",
      "validatorConfig():(address,uint32)",
      []
    );

    return new AggregatorInterface__validatorConfigResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_validatorConfig(): ethereum.CallResult<
    AggregatorInterface__validatorConfigResult
  > {
    let result = super.tryCall(
      "validatorConfig",
      "validatorConfig():(address,uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AggregatorInterface__validatorConfigResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  version(): BigInt {
    let result = super.call("version", "version():(uint256)", []);

    return result[0].toBigInt();
  }

  try_version(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("version", "version():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _maximumGasPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _reasonableGasPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _microLinkPerEth(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _linkGweiPerObservation(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _linkGweiPerTransmission(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _link(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _minAnswer(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _maxAnswer(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _billingAccessController(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get _requesterAccessController(): Address {
    return this._call.inputValues[9].value.toAddress();
  }

  get _decimals(): i32 {
    return this._call.inputValues[10].value.toI32();
  }

  get description(): string {
    return this._call.inputValues[11].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptPayeeshipCall extends ethereum.Call {
  get inputs(): AcceptPayeeshipCall__Inputs {
    return new AcceptPayeeshipCall__Inputs(this);
  }

  get outputs(): AcceptPayeeshipCall__Outputs {
    return new AcceptPayeeshipCall__Outputs(this);
  }
}

export class AcceptPayeeshipCall__Inputs {
  _call: AcceptPayeeshipCall;

  constructor(call: AcceptPayeeshipCall) {
    this._call = call;
  }

  get _transmitter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AcceptPayeeshipCall__Outputs {
  _call: AcceptPayeeshipCall;

  constructor(call: AcceptPayeeshipCall) {
    this._call = call;
  }
}

export class AddAccessCall extends ethereum.Call {
  get inputs(): AddAccessCall__Inputs {
    return new AddAccessCall__Inputs(this);
  }

  get outputs(): AddAccessCall__Outputs {
    return new AddAccessCall__Outputs(this);
  }
}

export class AddAccessCall__Inputs {
  _call: AddAccessCall;

  constructor(call: AddAccessCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAccessCall__Outputs {
  _call: AddAccessCall;

  constructor(call: AddAccessCall) {
    this._call = call;
  }
}

export class DisableAccessCheckCall extends ethereum.Call {
  get inputs(): DisableAccessCheckCall__Inputs {
    return new DisableAccessCheckCall__Inputs(this);
  }

  get outputs(): DisableAccessCheckCall__Outputs {
    return new DisableAccessCheckCall__Outputs(this);
  }
}

export class DisableAccessCheckCall__Inputs {
  _call: DisableAccessCheckCall;

  constructor(call: DisableAccessCheckCall) {
    this._call = call;
  }
}

export class DisableAccessCheckCall__Outputs {
  _call: DisableAccessCheckCall;

  constructor(call: DisableAccessCheckCall) {
    this._call = call;
  }
}

export class EnableAccessCheckCall extends ethereum.Call {
  get inputs(): EnableAccessCheckCall__Inputs {
    return new EnableAccessCheckCall__Inputs(this);
  }

  get outputs(): EnableAccessCheckCall__Outputs {
    return new EnableAccessCheckCall__Outputs(this);
  }
}

export class EnableAccessCheckCall__Inputs {
  _call: EnableAccessCheckCall;

  constructor(call: EnableAccessCheckCall) {
    this._call = call;
  }
}

export class EnableAccessCheckCall__Outputs {
  _call: EnableAccessCheckCall;

  constructor(call: EnableAccessCheckCall) {
    this._call = call;
  }
}

export class RemoveAccessCall extends ethereum.Call {
  get inputs(): RemoveAccessCall__Inputs {
    return new RemoveAccessCall__Inputs(this);
  }

  get outputs(): RemoveAccessCall__Outputs {
    return new RemoveAccessCall__Outputs(this);
  }
}

export class RemoveAccessCall__Inputs {
  _call: RemoveAccessCall;

  constructor(call: RemoveAccessCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAccessCall__Outputs {
  _call: RemoveAccessCall;

  constructor(call: RemoveAccessCall) {
    this._call = call;
  }
}

export class RequestNewRoundCall extends ethereum.Call {
  get inputs(): RequestNewRoundCall__Inputs {
    return new RequestNewRoundCall__Inputs(this);
  }

  get outputs(): RequestNewRoundCall__Outputs {
    return new RequestNewRoundCall__Outputs(this);
  }
}

export class RequestNewRoundCall__Inputs {
  _call: RequestNewRoundCall;

  constructor(call: RequestNewRoundCall) {
    this._call = call;
  }
}

export class RequestNewRoundCall__Outputs {
  _call: RequestNewRoundCall;

  constructor(call: RequestNewRoundCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetBillingCall extends ethereum.Call {
  get inputs(): SetBillingCall__Inputs {
    return new SetBillingCall__Inputs(this);
  }

  get outputs(): SetBillingCall__Outputs {
    return new SetBillingCall__Outputs(this);
  }
}

export class SetBillingCall__Inputs {
  _call: SetBillingCall;

  constructor(call: SetBillingCall) {
    this._call = call;
  }

  get _maximumGasPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _reasonableGasPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _microLinkPerEth(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _linkGweiPerObservation(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _linkGweiPerTransmission(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SetBillingCall__Outputs {
  _call: SetBillingCall;

  constructor(call: SetBillingCall) {
    this._call = call;
  }
}

export class SetBillingAccessControllerCall extends ethereum.Call {
  get inputs(): SetBillingAccessControllerCall__Inputs {
    return new SetBillingAccessControllerCall__Inputs(this);
  }

  get outputs(): SetBillingAccessControllerCall__Outputs {
    return new SetBillingAccessControllerCall__Outputs(this);
  }
}

export class SetBillingAccessControllerCall__Inputs {
  _call: SetBillingAccessControllerCall;

  constructor(call: SetBillingAccessControllerCall) {
    this._call = call;
  }

  get _billingAccessController(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBillingAccessControllerCall__Outputs {
  _call: SetBillingAccessControllerCall;

  constructor(call: SetBillingAccessControllerCall) {
    this._call = call;
  }
}

export class SetConfigCall extends ethereum.Call {
  get inputs(): SetConfigCall__Inputs {
    return new SetConfigCall__Inputs(this);
  }

  get outputs(): SetConfigCall__Outputs {
    return new SetConfigCall__Outputs(this);
  }
}

export class SetConfigCall__Inputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }

  get _signers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _transmitters(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _threshold(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _encodedConfigVersion(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _encoded(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SetConfigCall__Outputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }
}

export class SetPayeesCall extends ethereum.Call {
  get inputs(): SetPayeesCall__Inputs {
    return new SetPayeesCall__Inputs(this);
  }

  get outputs(): SetPayeesCall__Outputs {
    return new SetPayeesCall__Outputs(this);
  }
}

export class SetPayeesCall__Inputs {
  _call: SetPayeesCall;

  constructor(call: SetPayeesCall) {
    this._call = call;
  }

  get _transmitters(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _payees(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class SetPayeesCall__Outputs {
  _call: SetPayeesCall;

  constructor(call: SetPayeesCall) {
    this._call = call;
  }
}

export class SetRequesterAccessControllerCall extends ethereum.Call {
  get inputs(): SetRequesterAccessControllerCall__Inputs {
    return new SetRequesterAccessControllerCall__Inputs(this);
  }

  get outputs(): SetRequesterAccessControllerCall__Outputs {
    return new SetRequesterAccessControllerCall__Outputs(this);
  }
}

export class SetRequesterAccessControllerCall__Inputs {
  _call: SetRequesterAccessControllerCall;

  constructor(call: SetRequesterAccessControllerCall) {
    this._call = call;
  }

  get _requesterAccessController(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRequesterAccessControllerCall__Outputs {
  _call: SetRequesterAccessControllerCall;

  constructor(call: SetRequesterAccessControllerCall) {
    this._call = call;
  }
}

export class SetValidatorConfigCall extends ethereum.Call {
  get inputs(): SetValidatorConfigCall__Inputs {
    return new SetValidatorConfigCall__Inputs(this);
  }

  get outputs(): SetValidatorConfigCall__Outputs {
    return new SetValidatorConfigCall__Outputs(this);
  }
}

export class SetValidatorConfigCall__Inputs {
  _call: SetValidatorConfigCall;

  constructor(call: SetValidatorConfigCall) {
    this._call = call;
  }

  get _newValidator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _newGasLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetValidatorConfigCall__Outputs {
  _call: SetValidatorConfigCall;

  constructor(call: SetValidatorConfigCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TransferPayeeshipCall extends ethereum.Call {
  get inputs(): TransferPayeeshipCall__Inputs {
    return new TransferPayeeshipCall__Inputs(this);
  }

  get outputs(): TransferPayeeshipCall__Outputs {
    return new TransferPayeeshipCall__Outputs(this);
  }
}

export class TransferPayeeshipCall__Inputs {
  _call: TransferPayeeshipCall;

  constructor(call: TransferPayeeshipCall) {
    this._call = call;
  }

  get _transmitter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _proposed(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferPayeeshipCall__Outputs {
  _call: TransferPayeeshipCall;

  constructor(call: TransferPayeeshipCall) {
    this._call = call;
  }
}

export class TransmitCall extends ethereum.Call {
  get inputs(): TransmitCall__Inputs {
    return new TransmitCall__Inputs(this);
  }

  get outputs(): TransmitCall__Outputs {
    return new TransmitCall__Outputs(this);
  }
}

export class TransmitCall__Inputs {
  _call: TransmitCall;

  constructor(call: TransmitCall) {
    this._call = call;
  }

  get _report(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _rs(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get _ss(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get _rawVs(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class TransmitCall__Outputs {
  _call: TransmitCall;

  constructor(call: TransmitCall) {
    this._call = call;
  }
}

export class WithdrawFundsCall extends ethereum.Call {
  get inputs(): WithdrawFundsCall__Inputs {
    return new WithdrawFundsCall__Inputs(this);
  }

  get outputs(): WithdrawFundsCall__Outputs {
    return new WithdrawFundsCall__Outputs(this);
  }
}

export class WithdrawFundsCall__Inputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawFundsCall__Outputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }
}

export class WithdrawPaymentCall extends ethereum.Call {
  get inputs(): WithdrawPaymentCall__Inputs {
    return new WithdrawPaymentCall__Inputs(this);
  }

  get outputs(): WithdrawPaymentCall__Outputs {
    return new WithdrawPaymentCall__Outputs(this);
  }
}

export class WithdrawPaymentCall__Inputs {
  _call: WithdrawPaymentCall;

  constructor(call: WithdrawPaymentCall) {
    this._call = call;
  }

  get _transmitter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawPaymentCall__Outputs {
  _call: WithdrawPaymentCall;

  constructor(call: WithdrawPaymentCall) {
    this._call = call;
  }
}
