// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Vault__indexTransferFeeResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class Vault__mintResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Vault extends ethereum.SmartContract {
  static bind(address: Address): Vault {
    return new Vault("Vault", address);
  }

  PHTR(): Address {
    let result = super.call("PHTR", "PHTR():(address)", []);

    return result[0].toAddress();
  }

  try_PHTR(): ethereum.CallResult<Address> {
    let result = super.tryCall("PHTR", "PHTR():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  assetBalanceOf(_asset: Address, _account: Address): BigInt {
    let result = super.call(
      "assetBalanceOf",
      "assetBalanceOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(_asset), ethereum.Value.fromAddress(_account)]
    );

    return result[0].toBigInt();
  }

  try_assetBalanceOf(
    _asset: Address,
    _account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assetBalanceOf",
      "assetBalanceOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(_asset), ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(_asset: Address, _account: Address): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(_asset), ethereum.Value.fromAddress(_account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(
    _asset: Address,
    _account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(_asset), ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burn(_asset: Address, _recipient: Address): BigInt {
    let result = super.call("burn", "burn(address,address):(uint256)", [
      ethereum.Value.fromAddress(_asset),
      ethereum.Value.fromAddress(_recipient)
    ]);

    return result[0].toBigInt();
  }

  try_burn(_asset: Address, _recipient: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("burn", "burn(address,address):(uint256)", [
      ethereum.Value.fromAddress(_asset),
      ethereum.Value.fromAddress(_recipient)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burningFeeInBP(): i32 {
    let result = super.call("burningFeeInBP", "burningFeeInBP():(uint16)", []);

    return result[0].toI32();
  }

  try_burningFeeInBP(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "burningFeeInBP",
      "burningFeeInBP():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  indexTransferFee(_index: Address): Vault__indexTransferFeeResult {
    let result = super.call(
      "indexTransferFee",
      "indexTransferFee(address):(uint256,address)",
      [ethereum.Value.fromAddress(_index)]
    );

    return new Vault__indexTransferFeeResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_indexTransferFee(
    _index: Address
  ): ethereum.CallResult<Vault__indexTransferFeeResult> {
    let result = super.tryCall(
      "indexTransferFee",
      "indexTransferFee(address):(uint256,address)",
      [ethereum.Value.fromAddress(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__indexTransferFeeResult(
        value[0].toBigInt(),
        value[1].toAddress()
      )
    );
  }

  mint(_asset: Address, _recipient: Address): Vault__mintResult {
    let result = super.call("mint", "mint(address,address):(uint256,uint256)", [
      ethereum.Value.fromAddress(_asset),
      ethereum.Value.fromAddress(_recipient)
    ]);

    return new Vault__mintResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_mint(
    _asset: Address,
    _recipient: Address
  ): ethereum.CallResult<Vault__mintResult> {
    let result = super.tryCall(
      "mint",
      "mint(address,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_recipient)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__mintResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  mintingFeeInBP(): i32 {
    let result = super.call("mintingFeeInBP", "mintingFeeInBP():(uint16)", []);

    return result[0].toI32();
  }

  try_mintingFeeInBP(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "mintingFeeInBP",
      "mintingFeeInBP():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceOracle(): Address {
    let result = super.call("priceOracle", "priceOracle():(address)", []);

    return result[0].toAddress();
  }

  try_priceOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("priceOracle", "priceOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(_asset: Address): BigInt {
    let result = super.call("totalSupply", "totalSupply(address):(uint256)", [
      ethereum.Value.fromAddress(_asset)
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(_asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(address):(uint256)",
      [ethereum.Value.fromAddress(_asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vTokenOfAsset(_asset: Address): Address {
    let result = super.call(
      "vTokenOfAsset",
      "vTokenOfAsset(address):(address)",
      [ethereum.Value.fromAddress(_asset)]
    );

    return result[0].toAddress();
  }

  try_vTokenOfAsset(_asset: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "vTokenOfAsset",
      "vTokenOfAsset(address):(address)",
      [ethereum.Value.fromAddress(_asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _PHTR(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _priceOracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _mintingFeeInBP(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _burningFeeInBP(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get lastReserveInAsset(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetBurningFeeInBPCall extends ethereum.Call {
  get inputs(): SetBurningFeeInBPCall__Inputs {
    return new SetBurningFeeInBPCall__Inputs(this);
  }

  get outputs(): SetBurningFeeInBPCall__Outputs {
    return new SetBurningFeeInBPCall__Outputs(this);
  }
}

export class SetBurningFeeInBPCall__Inputs {
  _call: SetBurningFeeInBPCall;

  constructor(call: SetBurningFeeInBPCall) {
    this._call = call;
  }

  get _burningFeeInBP(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetBurningFeeInBPCall__Outputs {
  _call: SetBurningFeeInBPCall;

  constructor(call: SetBurningFeeInBPCall) {
    this._call = call;
  }
}

export class SetMintingFeeInBPCall extends ethereum.Call {
  get inputs(): SetMintingFeeInBPCall__Inputs {
    return new SetMintingFeeInBPCall__Inputs(this);
  }

  get outputs(): SetMintingFeeInBPCall__Outputs {
    return new SetMintingFeeInBPCall__Outputs(this);
  }
}

export class SetMintingFeeInBPCall__Inputs {
  _call: SetMintingFeeInBPCall;

  constructor(call: SetMintingFeeInBPCall) {
    this._call = call;
  }

  get _mintingFeeInBP(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetMintingFeeInBPCall__Outputs {
  _call: SetMintingFeeInBPCall;

  constructor(call: SetMintingFeeInBPCall) {
    this._call = call;
  }
}

export class SetPHTRCall extends ethereum.Call {
  get inputs(): SetPHTRCall__Inputs {
    return new SetPHTRCall__Inputs(this);
  }

  get outputs(): SetPHTRCall__Outputs {
    return new SetPHTRCall__Outputs(this);
  }
}

export class SetPHTRCall__Inputs {
  _call: SetPHTRCall;

  constructor(call: SetPHTRCall) {
    this._call = call;
  }

  get _PHTR(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPHTRCall__Outputs {
  _call: SetPHTRCall;

  constructor(call: SetPHTRCall) {
    this._call = call;
  }
}

export class SetPriceOracleCall extends ethereum.Call {
  get inputs(): SetPriceOracleCall__Inputs {
    return new SetPriceOracleCall__Inputs(this);
  }

  get outputs(): SetPriceOracleCall__Outputs {
    return new SetPriceOracleCall__Outputs(this);
  }
}

export class SetPriceOracleCall__Inputs {
  _call: SetPriceOracleCall;

  constructor(call: SetPriceOracleCall) {
    this._call = call;
  }

  get _priceOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPriceOracleCall__Outputs {
  _call: SetPriceOracleCall;

  constructor(call: SetPriceOracleCall) {
    this._call = call;
  }
}

export class SetRegistryCall extends ethereum.Call {
  get inputs(): SetRegistryCall__Inputs {
    return new SetRegistryCall__Inputs(this);
  }

  get outputs(): SetRegistryCall__Outputs {
    return new SetRegistryCall__Outputs(this);
  }
}

export class SetRegistryCall__Inputs {
  _call: SetRegistryCall;

  constructor(call: SetRegistryCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRegistryCall__Outputs {
  _call: SetRegistryCall;

  constructor(call: SetRegistryCall) {
    this._call = call;
  }
}

export class SyncCall extends ethereum.Call {
  get inputs(): SyncCall__Inputs {
    return new SyncCall__Inputs(this);
  }

  get outputs(): SyncCall__Outputs {
    return new SyncCall__Outputs(this);
  }
}

export class SyncCall__Inputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SyncCall__Outputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
