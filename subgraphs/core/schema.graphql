# ----------------------------------------------------------------
#                             Enums
# ----------------------------------------------------------------

enum TransferType {
  Send
  Mint
  Burn
}

# ----------------------------------------------------------------
#                             Common
# ----------------------------------------------------------------

type Transaction @entity {
  id: ID! # txn hash
  blockNumber: BigInt!
  timestamp: BigInt!

  value: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!

  transfers: [Transfer!]!
}

# ----------------------------------------------------------------
#                             Phuture Core
# ----------------------------------------------------------------
type Asset @entity {
  "Address of the asset"
  id: ID!

  "Is this asset whitelisted"
  isWhitelisted: Boolean!

  "Number of decimals this asset uses"
  decimals: BigInt!

  "Symbol of the asset"
  symbol: String!

  "Name of the asset"
  name: String!

  "Indexes this asset belongs to"
  indexes: [IndexAsset!]! @derivedFrom(field: "asset")
  _indexes: [ID!]!

  "Base price of the asset"
  basePrice: BigDecimal!

  "The vTokens this asset has"
  vTokens: [vToken!]! @derivedFrom(field: "asset")
  _vTokens: [ID!]!

  "Daily stats of the asset"
  dailyStats: [DailyAssetStat!]! @derivedFrom(field: "asset")

  "UniswapV3/UniswapPath price oracle for this asset"
  oracle: String
}

type ChainLink @entity {
  "Address of the ChainLink Aggregator Proxy"
  id: ID!

  "ChainLink Aggregator"
  aggregator: ChainLinkAggregator!
}

type ChainLinkAggregator @entity {

  "Address of the ChainLink Aggregator"
  id: ID!

  chainLink: ChainLink!
  asset: Asset!
  decimals: BigInt!
  description: String!
  answer: BigInt!
  updatedAt: BigInt!
  nextAgg: ChainLinkAggregator

  vaults: [SVVault!]!
}

type IndexFactory @entity {

  "Address of the factory"
  id: ID!

  "Type of factory, e.g. 'managed'"
  type: String!

  "Address of the vTokenFactory of this factory"
  vTokenFactory: String!

  "Indexes created by this factory"
  indexes: [Index!]! @derivedFrom(field: "indexFactory")
}

type Index @entity {

  "Address of the index"
  id: ID!

  "Total number of units created of this index"
  totalSupply: BigInt!

  "Number of decimals the index token uses"
  decimals: BigInt!

  "Symbol of the index token"
  symbol: String!

  "Name of the index token"
  name: String!

  "Data on the holders of the index"
  users: [UserIndex!]! @derivedFrom(field: "index")

  "Assets currently held by the index"
  assets: [IndexAsset!] @derivedFrom(field: "index")

  "All assets ever held by the index"
  _assets: [ID!]!

  "All inactive assets of the index"
  _inactiveAssets: [ID!]!

  "Current inactive assets of the index"
  inactiveAssets: [IndexAsset!] @derivedFrom(field: "inactiveIndex")

  transaction: Transaction!
  indexFactory: IndexFactory!

  "Market capitalisation of the index in USD"
  marketCap: BigDecimal!

  "Number of unique holders of the index"
  uniqueHolders: BigInt!

  "Price of the index in USD"
  basePrice: BigDecimal!

  "Price of the index in chain native token"
  basePriceETH: BigDecimal!

  "Baseline APY of the index"
  apy: BigDecimal!

  "Fee to burn units of the index"
  feeBurn: BigInt!

  "Fee to mint units of the index"
  feeMint: BigInt!

  """
  Annual management fee of the index
  BP = 10000 ; ((((aumFeeInBP / BP) / (1 - aumFeeInBP / BP)) / 1e27) ** 365) - 1
  """
  feeAUMPercent: BigDecimal!

  "Index creation date"
  created: BigInt!

  "Hourly statistics of the index"
  hourlyStats: [HourlyIndexStat!]! @derivedFrom(field: "index")

  "Daily statistics of the index"
  dailyStats: [DailyIndexStat!]! @derivedFrom(field: "index")
}

type vToken @entity {

  "Address of the vToken"
  id: ID!

  "Underlying asset held by the vToken"
  asset: Asset!

  "Factory contract of the vToken"
  factory: String!

  "Total number of vTokens created"
  platformTotalSupply: BigInt!

  "Quantity of underlying asset deposited to the vToken controller"
  deposited: BigInt!

  "Quantity of the underlying asset stored in vToken address"
  assetReserve: BigInt!

  "Sum of assetReserve and deposited without taking earned interest into account"
  totalAmount: BigInt!

  "Vault controller of the vToken"
  vaultController: VaultController

  "Percentage of underlying asset deposited into the vToken controller"
  depositedPercentage: BigInt!

  "Baseline yield on all the underlying assets in the vToken"
  apy: BigDecimal!
}

type VaultController @entity {

  "Address of vault controller"
  id: ID!

  "Stats on vToken held by the vault controller"
  vToken: vToken!

  "Quantity of underlying asset deposited"
  deposit: BigInt!

  "Timestamp of deposit"
  depositedAt: BigInt!

  "Quantity of underlying asset withdrawn"
  withdraw: BigInt!

  "Timestamp of withdrawal"
  withdrawnAt: BigInt!

  stats: [VaultControllerStat!]! @derivedFrom(field: "vaultController")
}

type VaultControllerStat @entity {

  "Set to {vaultController.id}-{date}"
  id: ID!

  vaultController: VaultController!

  deposit: BigInt!
  depositedAt: BigInt!

  withdraw: BigInt!
  withdrawnAt: BigInt!

  depositedPercentage: BigInt
  apy: BigDecimal!

  date: BigInt!
}

type IndexAsset @entity {

  "Set to {index.id}-{asset.id}"
  id: ID!

  "The index that includes this asset"
  index: Index

  inactiveIndex: Index

  "Statistics on the asset"
  asset: Asset!

  "Weight of the asset based on a range of 1 to 255, where 255 would be 100% weight"
  weight: BigInt!

  "Total number of vTokens for this asset"
  shares: BigInt!
}

type User @entity {

  "Address of the user"
  id: ID!

  "Indexes held by the user"
  indexes: [UserIndex!]! @derivedFrom(field: "user")
}

type UserIndex @entity {

  "Set to {user.id}-{index.id}"
  id: ID!

  "User address"
  user: User!

  "Index address"
  index: Index!

  "The user's balance of the given index"
  balance: BigDecimal!

  "USD value of amount invested into the index"
  investedCapital: BigDecimal!
}

type UserIndexHistory @entity {

  "Set to {user.id}-{index.id}-{timestamp}"
  id: ID!

  "User address"
  user: User!

  "Index address"
  index: Index!

  "Number of units of the index held"
  balance: BigDecimal!

  "index total supply on the moment of the user balance calculation"
  totalSupply: BigInt!

  "USD value of amount invested into the index"
  investedCapital: BigDecimal!

  "Timestamp matching the start of the day GMT"
  timestamp: Int!
}

type Transfer @entity {

  "Set to ${tx.id}-${transfer.id}"
  id: ID!
  index: Index!

  transaction: Transaction!

  from: Bytes

  to: Bytes

  value: BigInt!

  type: TransferType!
}

type DailyAssetStat @entity {

  id: ID!

  "Timestamp of stat"
  date: Int!

  asset: Asset!

  "Price in USD of the asset"
  basePrice: BigDecimal!
}

type HourlyIndexStat @entity {

  id: ID!

  "Timestamp of stat"
  date: Int!

  index: Index!

  "Price of index in USD"
  basePrice: BigDecimal!

  "Market capitalisation of the index in USD"
  marketCap: BigDecimal!

  "Number of unique holders"
  uniqueHolders: BigInt!

  "Baseline APY of the index"
  apy: BigDecimal!
}

type DailyIndexStat @entity {

  id: ID!

  "Timestamp of stat"
  date: Int!

  index: Index!

  "Market capitalisation of the index in USD"
  marketCap: BigDecimal!

  "Total supply of the index"
  totalSupply: BigInt!

  "Number of unique holders"
  uniqueHolders: BigInt!

  "Price of the index in USD"
  basePrice: BigDecimal!

  "Price of the index in chain native token"
  basePriceETH: BigDecimal!
  apy: BigDecimal!
}

# ----------------------------------------------------------------
#                             Savings Vault
# ----------------------------------------------------------------

type SVVault @entity {

  "Address of savings vault"
  id: ID!

  "Total number of units of the savings vault"
  totalSupply: BigInt!

  "USD value of assets held by the savings vault"
  totalAssets: BigInt!

  "Number of decimals used by the savings vault"
  decimals: BigInt!

  "Symbol of the savings vault"
  symbol: String!

  "Name of the savings vault"
  name: String!

  "Price of the savings vault in USD"
  basePrice: BigDecimal!

  "Price of the vault in chain native token"
  basePriceETH: BigDecimal!

  "Fee to burn units of the index"
  feeBurn: BigInt!

  "Fee to mint units of the index"
  feeMint: BigInt!

  "Annual management fee of the savings vault"
  feeAUMPercent: BigDecimal!

  "Number of unique holders of the savings vault"
  uniqueHolders: BigInt!

  "Market capitalisation of the savings vault in USD"
  marketCap: BigDecimal!

  "Current APY of the savings vault"
  apy: BigDecimal!

  dailyStats: [SVDailyStat!]! @derivedFrom(field: "vault")

  "Date the savings vault was created"
  created: BigInt!
}

type SVUser @entity {
  id: ID!

  vaults: [UserVault!]! @derivedFrom(field: "user")
}

type UserVault @entity {
  id: ID!

  user: SVUser!
  vault: SVVault!

  balance: BigDecimal!

  "USD value of amount invested into the savings vault"
  investedCapital: BigDecimal!
}

type SVTransfer @entity {
  id: ID!
  vault: SVVault!
  transaction: Transaction!
  type: TransferType!

  from: SVUser
  to: SVUser
  value: BigInt!

  timestamp: BigInt!
}

type SVDailyStat @entity {
  id: ID!

  date: BigInt!
  vault: SVVault!

  apy: BigDecimal!
  marketCap: BigDecimal!
  "total supply of saving vault"
  totalSupply: BigInt!
  uniqueHolders: BigInt!
  "price of the vault in USD"
  basePrice: BigDecimal!
  "Price of the vault in chain native token"
  basePriceETH: BigDecimal!
}

type UserSVHistory @entity {
  id: ID!

  "user account of the specific vault holdings"
  user: SVUser!
  vault: SVVault!

  "shares of the vault in user account"
  balance: BigDecimal!
  "vault total supply on the moment of the user balance calculation"
  totalSupply: BigInt!
  "USD value of amount invested into the savings vault"
  investedCapital: BigDecimal!

  "timestamp matching the starting of day GMT"
  timestamp: Int!
}

# ----------------------------------------------------------------
#                               UniswapV3
# ----------------------------------------------------------------

# stores UniswapV3PriceOracle addresses
type UniV3PriceOracle @entity {
  id: ID!

  priceOracle: String!

  asset0: Asset!
  asset1: Asset!
}

type UniV3PathPriceOracle @entity {
  id: ID!

  pathPriceOracle: String!

  asset0: Asset!
  asset1: Asset!
}
