// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Asset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("isWhitelisted", Value.fromBoolean(false));
    this.set("totalSupply", Value.fromBigInt(BigInt.zero()));
    this.set("decimals", Value.fromBigInt(BigInt.zero()));
    this.set("symbol", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("indexCount", Value.fromBigInt(BigInt.zero()));
    this.set("_indexes", Value.fromStringArray(new Array(0)));
    this.set("basePrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("marketCap", Value.fromBigInt(BigInt.zero()));
    this.set("vaultReserve", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("vaultBaseReserve", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Asset entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Asset entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Asset", id.toString(), this);
    }
  }

  static load(id: string): Asset | null {
    return changetype<Asset | null>(store.get("Asset", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prev(): string | null {
    let value = this.get("prev");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set prev(value: string | null) {
    if (!value) {
      this.unset("prev");
    } else {
      this.set("prev", Value.fromString(<string>value));
    }
  }

  get isWhitelisted(): boolean {
    let value = this.get("isWhitelisted");
    return value!.toBoolean();
  }

  set isWhitelisted(value: boolean) {
    this.set("isWhitelisted", Value.fromBoolean(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get indexCount(): BigInt {
    let value = this.get("indexCount");
    return value!.toBigInt();
  }

  set indexCount(value: BigInt) {
    this.set("indexCount", Value.fromBigInt(value));
  }

  get _indexes(): Array<string> {
    let value = this.get("_indexes");
    return value!.toStringArray();
  }

  set _indexes(value: Array<string>) {
    this.set("_indexes", Value.fromStringArray(value));
  }

  get indexes(): Array<string> | null {
    let value = this.get("indexes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set indexes(value: Array<string> | null) {
    if (!value) {
      this.unset("indexes");
    } else {
      this.set("indexes", Value.fromStringArray(<Array<string>>value));
    }
  }

  get basePrice(): BigDecimal {
    let value = this.get("basePrice");
    return value!.toBigDecimal();
  }

  set basePrice(value: BigDecimal) {
    this.set("basePrice", Value.fromBigDecimal(value));
  }

  get marketCap(): BigInt {
    let value = this.get("marketCap");
    return value!.toBigInt();
  }

  set marketCap(value: BigInt) {
    this.set("marketCap", Value.fromBigInt(value));
  }

  get vaultReserve(): BigDecimal {
    let value = this.get("vaultReserve");
    return value!.toBigDecimal();
  }

  set vaultReserve(value: BigDecimal) {
    this.set("vaultReserve", Value.fromBigDecimal(value));
  }

  get vaultBaseReserve(): BigDecimal {
    let value = this.get("vaultBaseReserve");
    return value!.toBigDecimal();
  }

  set vaultBaseReserve(value: BigDecimal) {
    this.set("vaultBaseReserve", Value.fromBigDecimal(value));
  }

  get pairsAsAsset0(): Array<string> {
    let value = this.get("pairsAsAsset0");
    return value!.toStringArray();
  }

  set pairsAsAsset0(value: Array<string>) {
    this.set("pairsAsAsset0", Value.fromStringArray(value));
  }

  get pairsAsAsset1(): Array<string> {
    let value = this.get("pairsAsAsset1");
    return value!.toStringArray();
  }

  set pairsAsAsset1(value: Array<string>) {
    this.set("pairsAsAsset1", Value.fromStringArray(value));
  }

  get dailyStats(): Array<string> {
    let value = this.get("dailyStats");
    return value!.toStringArray();
  }

  set dailyStats(value: Array<string>) {
    this.set("dailyStats", Value.fromStringArray(value));
  }
}

export class Pair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("asset0", Value.fromString(""));
    this.set("asset1", Value.fromString(""));
    this.set("totalSupply", Value.fromBigInt(BigInt.zero()));
    this.set("asset0Reserve", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("asset1Reserve", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Pair entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Pair", id.toString(), this);
    }
  }

  static load(id: string): Pair | null {
    return changetype<Pair | null>(store.get("Pair", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get asset0(): string {
    let value = this.get("asset0");
    return value!.toString();
  }

  set asset0(value: string) {
    this.set("asset0", Value.fromString(value));
  }

  get asset1(): string {
    let value = this.get("asset1");
    return value!.toString();
  }

  set asset1(value: string) {
    this.set("asset1", Value.fromString(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get asset0Reserve(): BigDecimal {
    let value = this.get("asset0Reserve");
    return value!.toBigDecimal();
  }

  set asset0Reserve(value: BigDecimal) {
    this.set("asset0Reserve", Value.fromBigDecimal(value));
  }

  get asset1Reserve(): BigDecimal {
    let value = this.get("asset1Reserve");
    return value!.toBigDecimal();
  }

  set asset1Reserve(value: BigDecimal) {
    this.set("asset1Reserve", Value.fromBigDecimal(value));
  }
}

export class Index extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("decimals", Value.fromBigInt(BigInt.zero()));
    this.set("symbol", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("_assets", Value.fromStringArray(new Array(0)));
    this.set("transaction", Value.fromString(""));
    this.set("marketCap", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("uniqueHolders", Value.fromBigInt(BigInt.zero()));
    this.set("basePrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("baseVolume", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("indexCount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Index entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Index entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Index", id.toString(), this);
    }
  }

  static load(id: string): Index | null {
    return changetype<Index | null>(store.get("Index", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get imageUrl(): string | null {
    let value = this.get("imageUrl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set imageUrl(value: string | null) {
    if (!value) {
      this.unset("imageUrl");
    } else {
      this.set("imageUrl", Value.fromString(<string>value));
    }
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get users(): Array<string> {
    let value = this.get("users");
    return value!.toStringArray();
  }

  set users(value: Array<string>) {
    this.set("users", Value.fromStringArray(value));
  }

  get assets(): Array<string> {
    let value = this.get("assets");
    return value!.toStringArray();
  }

  set assets(value: Array<string>) {
    this.set("assets", Value.fromStringArray(value));
  }

  get _assets(): Array<string> {
    let value = this.get("_assets");
    return value!.toStringArray();
  }

  set _assets(value: Array<string>) {
    this.set("_assets", Value.fromStringArray(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get marketCap(): BigDecimal {
    let value = this.get("marketCap");
    return value!.toBigDecimal();
  }

  set marketCap(value: BigDecimal) {
    this.set("marketCap", Value.fromBigDecimal(value));
  }

  get uniqueHolders(): BigInt {
    let value = this.get("uniqueHolders");
    return value!.toBigInt();
  }

  set uniqueHolders(value: BigInt) {
    this.set("uniqueHolders", Value.fromBigInt(value));
  }

  get basePrice(): BigDecimal {
    let value = this.get("basePrice");
    return value!.toBigDecimal();
  }

  set basePrice(value: BigDecimal) {
    this.set("basePrice", Value.fromBigDecimal(value));
  }

  get baseVolume(): BigDecimal {
    let value = this.get("baseVolume");
    return value!.toBigDecimal();
  }

  set baseVolume(value: BigDecimal) {
    this.set("baseVolume", Value.fromBigDecimal(value));
  }

  get indexCount(): BigInt {
    let value = this.get("indexCount");
    return value!.toBigInt();
  }

  set indexCount(value: BigInt) {
    this.set("indexCount", Value.fromBigInt(value));
  }

  get hourlyStats(): Array<string> {
    let value = this.get("hourlyStats");
    return value!.toStringArray();
  }

  set hourlyStats(value: Array<string>) {
    this.set("hourlyStats", Value.fromStringArray(value));
  }

  get dailyStats(): Array<string> {
    let value = this.get("dailyStats");
    return value!.toStringArray();
  }

  set dailyStats(value: Array<string>) {
    this.set("dailyStats", Value.fromStringArray(value));
  }

  get weeklyStats(): Array<string> {
    let value = this.get("weeklyStats");
    return value!.toStringArray();
  }

  set weeklyStats(value: Array<string>) {
    this.set("weeklyStats", Value.fromStringArray(value));
  }

  get monthlyStats(): Array<string> {
    let value = this.get("monthlyStats");
    return value!.toStringArray();
  }

  set monthlyStats(value: Array<string>) {
    this.set("monthlyStats", Value.fromStringArray(value));
  }

  get yearlyStats(): Array<string> {
    let value = this.get("yearlyStats");
    return value!.toStringArray();
  }

  set yearlyStats(value: Array<string>) {
    this.set("yearlyStats", Value.fromStringArray(value));
  }
}

export class IndexAsset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("index", Value.fromString(""));
    this.set("asset", Value.fromString(""));
    this.set("weight", Value.fromBigInt(BigInt.zero()));
    this.set("vaultTotalSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("basePrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("marketCap", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save IndexAsset entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save IndexAsset entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("IndexAsset", id.toString(), this);
    }
  }

  static load(id: string): IndexAsset | null {
    return changetype<IndexAsset | null>(store.get("IndexAsset", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): string {
    let value = this.get("index");
    return value!.toString();
  }

  set index(value: string) {
    this.set("index", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value!.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get weight(): BigInt {
    let value = this.get("weight");
    return value!.toBigInt();
  }

  set weight(value: BigInt) {
    this.set("weight", Value.fromBigInt(value));
  }

  get vaultTotalSupply(): BigDecimal {
    let value = this.get("vaultTotalSupply");
    return value!.toBigDecimal();
  }

  set vaultTotalSupply(value: BigDecimal) {
    this.set("vaultTotalSupply", Value.fromBigDecimal(value));
  }

  get basePrice(): BigDecimal {
    let value = this.get("basePrice");
    return value!.toBigDecimal();
  }

  set basePrice(value: BigDecimal) {
    this.set("basePrice", Value.fromBigDecimal(value));
  }

  get marketCap(): BigDecimal {
    let value = this.get("marketCap");
    return value!.toBigDecimal();
  }

  set marketCap(value: BigDecimal) {
    this.set("marketCap", Value.fromBigDecimal(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get indexes(): Array<string> {
    let value = this.get("indexes");
    return value!.toStringArray();
  }

  set indexes(value: Array<string>) {
    this.set("indexes", Value.fromStringArray(value));
  }
}

export class UserIndex extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user", Value.fromString(""));
    this.set("index", Value.fromString(""));
    this.set("balance", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserIndex entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UserIndex entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UserIndex", id.toString(), this);
    }
  }

  static load(id: string): UserIndex | null {
    return changetype<UserIndex | null>(store.get("UserIndex", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get index(): string {
    let value = this.get("index");
    return value!.toString();
  }

  set index(value: string) {
    this.set("index", Value.fromString(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    return value!.toBigDecimal();
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("transfers", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get transfers(): Array<string> {
    let value = this.get("transfers");
    return value!.toStringArray();
  }

  set transfers(value: Array<string>) {
    this.set("transfers", Value.fromStringArray(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("index", Value.fromString(""));
    this.set("transaction", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("type", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transfer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): string {
    let value = this.get("index");
    return value!.toString();
  }

  set index(value: string) {
    this.set("index", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get from(): Bytes | null {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes | null) {
    if (!value) {
      this.unset("from");
    } else {
      this.set("from", Value.fromBytes(<Bytes>value));
    }
  }

  get to(): Bytes | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromBytes(<Bytes>value));
    }
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class Stat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("indexCount", Value.fromBigInt(BigInt.zero()));
    this.set("totalValueLocked", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Stat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Stat entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Stat", id.toString(), this);
    }
  }

  static load(id: string): Stat | null {
    return changetype<Stat | null>(store.get("Stat", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get indexCount(): BigInt {
    let value = this.get("indexCount");
    return value!.toBigInt();
  }

  set indexCount(value: BigInt) {
    this.set("indexCount", Value.fromBigInt(value));
  }

  get totalValueLocked(): BigDecimal {
    let value = this.get("totalValueLocked");
    return value!.toBigDecimal();
  }

  set totalValueLocked(value: BigDecimal) {
    this.set("totalValueLocked", Value.fromBigDecimal(value));
  }
}

export class DailyStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromI32(0));
    this.set("indexCount", Value.fromBigInt(BigInt.zero()));
    this.set("totalValueLocked", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DailyStat entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DailyStat", id.toString(), this);
    }
  }

  static load(id: string): DailyStat | null {
    return changetype<DailyStat | null>(store.get("DailyStat", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get indexCount(): BigInt {
    let value = this.get("indexCount");
    return value!.toBigInt();
  }

  set indexCount(value: BigInt) {
    this.set("indexCount", Value.fromBigInt(value));
  }

  get totalValueLocked(): BigDecimal {
    let value = this.get("totalValueLocked");
    return value!.toBigDecimal();
  }

  set totalValueLocked(value: BigDecimal) {
    this.set("totalValueLocked", Value.fromBigDecimal(value));
  }
}

export class DailyAssetStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromI32(0));
    this.set("asset", Value.fromString(""));
    this.set("vaultReserve", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("vaultBaseReserve", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("basePrice", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyAssetStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DailyAssetStat entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DailyAssetStat", id.toString(), this);
    }
  }

  static load(id: string): DailyAssetStat | null {
    return changetype<DailyAssetStat | null>(store.get("DailyAssetStat", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value!.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get vaultReserve(): BigDecimal {
    let value = this.get("vaultReserve");
    return value!.toBigDecimal();
  }

  set vaultReserve(value: BigDecimal) {
    this.set("vaultReserve", Value.fromBigDecimal(value));
  }

  get vaultBaseReserve(): BigDecimal {
    let value = this.get("vaultBaseReserve");
    return value!.toBigDecimal();
  }

  set vaultBaseReserve(value: BigDecimal) {
    this.set("vaultBaseReserve", Value.fromBigDecimal(value));
  }

  get basePrice(): BigDecimal {
    let value = this.get("basePrice");
    return value!.toBigDecimal();
  }

  set basePrice(value: BigDecimal) {
    this.set("basePrice", Value.fromBigDecimal(value));
  }
}

export class HourlyIndexStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromI32(0));
    this.set("index", Value.fromString(""));
    this.set("basePrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("marketCap", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("baseVolume", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("uniqueHolders", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HourlyIndexStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save HourlyIndexStat entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("HourlyIndexStat", id.toString(), this);
    }
  }

  static load(id: string): HourlyIndexStat | null {
    return changetype<HourlyIndexStat | null>(store.get("HourlyIndexStat", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get index(): string {
    let value = this.get("index");
    return value!.toString();
  }

  set index(value: string) {
    this.set("index", Value.fromString(value));
  }

  get basePrice(): BigDecimal {
    let value = this.get("basePrice");
    return value!.toBigDecimal();
  }

  set basePrice(value: BigDecimal) {
    this.set("basePrice", Value.fromBigDecimal(value));
  }

  get marketCap(): BigDecimal {
    let value = this.get("marketCap");
    return value!.toBigDecimal();
  }

  set marketCap(value: BigDecimal) {
    this.set("marketCap", Value.fromBigDecimal(value));
  }

  get baseVolume(): BigDecimal {
    let value = this.get("baseVolume");
    return value!.toBigDecimal();
  }

  set baseVolume(value: BigDecimal) {
    this.set("baseVolume", Value.fromBigDecimal(value));
  }

  get uniqueHolders(): BigInt {
    let value = this.get("uniqueHolders");
    return value!.toBigInt();
  }

  set uniqueHolders(value: BigInt) {
    this.set("uniqueHolders", Value.fromBigInt(value));
  }
}

export class DailyIndexStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromI32(0));
    this.set("index", Value.fromString(""));
    this.set("marketCap", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("uniqueHolders", Value.fromBigInt(BigInt.zero()));
    this.set("basePrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("baseVolume", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyIndexStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DailyIndexStat entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DailyIndexStat", id.toString(), this);
    }
  }

  static load(id: string): DailyIndexStat | null {
    return changetype<DailyIndexStat | null>(store.get("DailyIndexStat", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get index(): string {
    let value = this.get("index");
    return value!.toString();
  }

  set index(value: string) {
    this.set("index", Value.fromString(value));
  }

  get marketCap(): BigDecimal {
    let value = this.get("marketCap");
    return value!.toBigDecimal();
  }

  set marketCap(value: BigDecimal) {
    this.set("marketCap", Value.fromBigDecimal(value));
  }

  get uniqueHolders(): BigInt {
    let value = this.get("uniqueHolders");
    return value!.toBigInt();
  }

  set uniqueHolders(value: BigInt) {
    this.set("uniqueHolders", Value.fromBigInt(value));
  }

  get basePrice(): BigDecimal {
    let value = this.get("basePrice");
    return value!.toBigDecimal();
  }

  set basePrice(value: BigDecimal) {
    this.set("basePrice", Value.fromBigDecimal(value));
  }

  get baseVolume(): BigDecimal {
    let value = this.get("baseVolume");
    return value!.toBigDecimal();
  }

  set baseVolume(value: BigDecimal) {
    this.set("baseVolume", Value.fromBigDecimal(value));
  }
}

export class WeeklyIndexStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromI32(0));
    this.set("index", Value.fromString(""));
    this.set("basePrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("marketCap", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("baseVolume", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("uniqueHolders", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WeeklyIndexStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WeeklyIndexStat entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WeeklyIndexStat", id.toString(), this);
    }
  }

  static load(id: string): WeeklyIndexStat | null {
    return changetype<WeeklyIndexStat | null>(store.get("WeeklyIndexStat", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get index(): string {
    let value = this.get("index");
    return value!.toString();
  }

  set index(value: string) {
    this.set("index", Value.fromString(value));
  }

  get basePrice(): BigDecimal {
    let value = this.get("basePrice");
    return value!.toBigDecimal();
  }

  set basePrice(value: BigDecimal) {
    this.set("basePrice", Value.fromBigDecimal(value));
  }

  get marketCap(): BigDecimal {
    let value = this.get("marketCap");
    return value!.toBigDecimal();
  }

  set marketCap(value: BigDecimal) {
    this.set("marketCap", Value.fromBigDecimal(value));
  }

  get baseVolume(): BigDecimal {
    let value = this.get("baseVolume");
    return value!.toBigDecimal();
  }

  set baseVolume(value: BigDecimal) {
    this.set("baseVolume", Value.fromBigDecimal(value));
  }

  get uniqueHolders(): BigInt {
    let value = this.get("uniqueHolders");
    return value!.toBigInt();
  }

  set uniqueHolders(value: BigInt) {
    this.set("uniqueHolders", Value.fromBigInt(value));
  }
}

export class MonthlyIndexStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromI32(0));
    this.set("index", Value.fromString(""));
    this.set("basePrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("marketCap", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("baseVolume", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("uniqueHolders", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MonthlyIndexStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MonthlyIndexStat entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MonthlyIndexStat", id.toString(), this);
    }
  }

  static load(id: string): MonthlyIndexStat | null {
    return changetype<MonthlyIndexStat | null>(
      store.get("MonthlyIndexStat", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get index(): string {
    let value = this.get("index");
    return value!.toString();
  }

  set index(value: string) {
    this.set("index", Value.fromString(value));
  }

  get basePrice(): BigDecimal {
    let value = this.get("basePrice");
    return value!.toBigDecimal();
  }

  set basePrice(value: BigDecimal) {
    this.set("basePrice", Value.fromBigDecimal(value));
  }

  get marketCap(): BigDecimal {
    let value = this.get("marketCap");
    return value!.toBigDecimal();
  }

  set marketCap(value: BigDecimal) {
    this.set("marketCap", Value.fromBigDecimal(value));
  }

  get baseVolume(): BigDecimal {
    let value = this.get("baseVolume");
    return value!.toBigDecimal();
  }

  set baseVolume(value: BigDecimal) {
    this.set("baseVolume", Value.fromBigDecimal(value));
  }

  get uniqueHolders(): BigInt {
    let value = this.get("uniqueHolders");
    return value!.toBigInt();
  }

  set uniqueHolders(value: BigInt) {
    this.set("uniqueHolders", Value.fromBigInt(value));
  }
}

export class YearlyIndexStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromI32(0));
    this.set("index", Value.fromString(""));
    this.set("basePrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("marketCap", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("baseVolume", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("uniqueHolders", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save YearlyIndexStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save YearlyIndexStat entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("YearlyIndexStat", id.toString(), this);
    }
  }

  static load(id: string): YearlyIndexStat | null {
    return changetype<YearlyIndexStat | null>(store.get("YearlyIndexStat", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get index(): string {
    let value = this.get("index");
    return value!.toString();
  }

  set index(value: string) {
    this.set("index", Value.fromString(value));
  }

  get basePrice(): BigDecimal {
    let value = this.get("basePrice");
    return value!.toBigDecimal();
  }

  set basePrice(value: BigDecimal) {
    this.set("basePrice", Value.fromBigDecimal(value));
  }

  get marketCap(): BigDecimal {
    let value = this.get("marketCap");
    return value!.toBigDecimal();
  }

  set marketCap(value: BigDecimal) {
    this.set("marketCap", Value.fromBigDecimal(value));
  }

  get baseVolume(): BigDecimal {
    let value = this.get("baseVolume");
    return value!.toBigDecimal();
  }

  set baseVolume(value: BigDecimal) {
    this.set("baseVolume", Value.fromBigDecimal(value));
  }

  get uniqueHolders(): BigInt {
    let value = this.get("uniqueHolders");
    return value!.toBigInt();
  }

  set uniqueHolders(value: BigInt) {
    this.set("uniqueHolders", Value.fromBigInt(value));
  }
}

export class VestingRange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("account", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("rangeStartIndex", Value.fromBigInt(BigInt.zero()));
    this.set("rangeEndIndex", Value.fromBigInt(BigInt.zero()));
    this.set("unstaked", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VestingRange entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save VestingRange entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("VestingRange", id.toString(), this);
    }
  }

  static load(id: string): VestingRange | null {
    return changetype<VestingRange | null>(store.get("VestingRange", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get rangeStartIndex(): BigInt {
    let value = this.get("rangeStartIndex");
    return value!.toBigInt();
  }

  set rangeStartIndex(value: BigInt) {
    this.set("rangeStartIndex", Value.fromBigInt(value));
  }

  get rangeEndIndex(): BigInt {
    let value = this.get("rangeEndIndex");
    return value!.toBigInt();
  }

  set rangeEndIndex(value: BigInt) {
    this.set("rangeEndIndex", Value.fromBigInt(value));
  }

  get unstaked(): boolean {
    let value = this.get("unstaked");
    return value!.toBoolean();
  }

  set unstaked(value: boolean) {
    this.set("unstaked", Value.fromBoolean(value));
  }
}

export class LM extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalReward", Value.fromBigInt(BigInt.zero()));
    this.set("APR", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LM entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LM entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LM", id.toString(), this);
    }
  }

  static load(id: string): LM | null {
    return changetype<LM | null>(store.get("LM", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalReward(): BigInt {
    let value = this.get("totalReward");
    return value!.toBigInt();
  }

  set totalReward(value: BigInt) {
    this.set("totalReward", Value.fromBigInt(value));
  }

  get APR(): BigDecimal {
    let value = this.get("APR");
    return value!.toBigDecimal();
  }

  set APR(value: BigDecimal) {
    this.set("APR", Value.fromBigDecimal(value));
  }
}

export class Reward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Reward entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Reward", id.toString(), this);
    }
  }

  static load(id: string): Reward | null {
    return changetype<Reward | null>(store.get("Reward", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}
