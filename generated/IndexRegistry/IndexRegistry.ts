// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddFactory extends ethereum.Event {
  get params(): AddFactory__Params {
    return new AddFactory__Params(this);
  }
}

export class AddFactory__Params {
  _event: AddFactory;

  constructor(event: AddFactory) {
    this._event = event;
  }

  get factory(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AddOracle extends ethereum.Event {
  get params(): AddOracle__Params {
    return new AddOracle__Params(this);
  }
}

export class AddOracle__Params {
  _event: AddOracle;

  constructor(event: AddOracle) {
    this._event = event;
  }

  get oracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RemoveAsset extends ethereum.Event {
  get params(): RemoveAsset__Params {
    return new RemoveAsset__Params(this);
  }
}

export class RemoveAsset__Params {
  _event: RemoveAsset;

  constructor(event: RemoveAsset) {
    this._event = event;
  }

  get prev(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RemoveFactory extends ethereum.Event {
  get params(): RemoveFactory__Params {
    return new RemoveFactory__Params(this);
  }
}

export class RemoveFactory__Params {
  _event: RemoveFactory;

  constructor(event: RemoveFactory) {
    this._event = event;
  }

  get factory(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RemoveOracle extends ethereum.Event {
  get params(): RemoveOracle__Params {
    return new RemoveOracle__Params(this);
  }
}

export class RemoveOracle__Params {
  _event: RemoveOracle;

  constructor(event: RemoveOracle) {
    this._event = event;
  }

  get oracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdateAsset extends ethereum.Event {
  get params(): UpdateAsset__Params {
    return new UpdateAsset__Params(this);
  }
}

export class UpdateAsset__Params {
  _event: UpdateAsset;

  constructor(event: UpdateAsset) {
    this._event = event;
  }

  get prev(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get marketCap(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class IndexRegistry__marketCapsOfResult {
  value0: Array<BigInt>;
  value1: BigInt;

  constructor(value0: Array<BigInt>, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class IndexRegistry__nextNodeOfResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class IndexRegistry__topResult {
  value0: Array<Address>;
  value1: Array<BigInt>;
  value2: BigInt;
  value3: BigInt;

  constructor(
    value0: Array<Address>,
    value1: Array<BigInt>,
    value2: BigInt,
    value3: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class IndexRegistry extends ethereum.SmartContract {
  static bind(address: Address): IndexRegistry {
    return new IndexRegistry("IndexRegistry", address);
  }

  factoryAt(_position: BigInt): Address {
    let result = super.call("factoryAt", "factoryAt(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_position)
    ]);

    return result[0].toAddress();
  }

  try_factoryAt(_position: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("factoryAt", "factoryAt(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_position)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasAllAssets(_assets: Array<Address>): boolean {
    let result = super.call("hasAllAssets", "hasAllAssets(address[]):(bool)", [
      ethereum.Value.fromAddressArray(_assets)
    ]);

    return result[0].toBoolean();
  }

  try_hasAllAssets(_assets: Array<Address>): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasAllAssets",
      "hasAllAssets(address[]):(bool)",
      [ethereum.Value.fromAddressArray(_assets)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasAsset(_asset: Address): boolean {
    let result = super.call("hasAsset", "hasAsset(address):(bool)", [
      ethereum.Value.fromAddress(_asset)
    ]);

    return result[0].toBoolean();
  }

  try_hasAsset(_asset: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasAsset", "hasAsset(address):(bool)", [
      ethereum.Value.fromAddress(_asset)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasFactory(_factory: Address): boolean {
    let result = super.call("hasFactory", "hasFactory(address):(bool)", [
      ethereum.Value.fromAddress(_factory)
    ]);

    return result[0].toBoolean();
  }

  try_hasFactory(_factory: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasFactory", "hasFactory(address):(bool)", [
      ethereum.Value.fromAddress(_factory)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasIndex(_index: Address): boolean {
    let result = super.call("hasIndex", "hasIndex(address):(bool)", [
      ethereum.Value.fromAddress(_index)
    ]);

    return result[0].toBoolean();
  }

  try_hasIndex(_index: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasIndex", "hasIndex(address):(bool)", [
      ethereum.Value.fromAddress(_index)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasOracle(_oracle: Address): boolean {
    let result = super.call("hasOracle", "hasOracle(address):(bool)", [
      ethereum.Value.fromAddress(_oracle)
    ]);

    return result[0].toBoolean();
  }

  try_hasOracle(_oracle: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasOracle", "hasOracle(address):(bool)", [
      ethereum.Value.fromAddress(_oracle)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  indexAt(_position: BigInt): Address {
    let result = super.call("indexAt", "indexAt(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_position)
    ]);

    return result[0].toAddress();
  }

  try_indexAt(_position: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("indexAt", "indexAt(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_position)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  indexCount(): BigInt {
    let result = super.call("indexCount", "indexCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_indexCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("indexCount", "indexCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  indexOfName(param0: string): Address {
    let result = super.call("indexOfName", "indexOfName(string):(address)", [
      ethereum.Value.fromString(param0)
    ]);

    return result[0].toAddress();
  }

  try_indexOfName(param0: string): ethereum.CallResult<Address> {
    let result = super.tryCall("indexOfName", "indexOfName(string):(address)", [
      ethereum.Value.fromString(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  indexOfSymbol(param0: string): Address {
    let result = super.call(
      "indexOfSymbol",
      "indexOfSymbol(string):(address)",
      [ethereum.Value.fromString(param0)]
    );

    return result[0].toAddress();
  }

  try_indexOfSymbol(param0: string): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "indexOfSymbol",
      "indexOfSymbol(string):(address)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  marketCapOf(param0: Address): BigInt {
    let result = super.call("marketCapOf", "marketCapOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_marketCapOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marketCapOf",
      "marketCapOf(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marketCapsOf(_assets: Array<Address>): IndexRegistry__marketCapsOfResult {
    let result = super.call(
      "marketCapsOf",
      "marketCapsOf(address[]):(uint256[],uint256)",
      [ethereum.Value.fromAddressArray(_assets)]
    );

    return new IndexRegistry__marketCapsOfResult(
      result[0].toBigIntArray(),
      result[1].toBigInt()
    );
  }

  try_marketCapsOf(
    _assets: Array<Address>
  ): ethereum.CallResult<IndexRegistry__marketCapsOfResult> {
    let result = super.tryCall(
      "marketCapsOf",
      "marketCapsOf(address[]):(uint256[],uint256)",
      [ethereum.Value.fromAddressArray(_assets)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IndexRegistry__marketCapsOfResult(
        value[0].toBigIntArray(),
        value[1].toBigInt()
      )
    );
  }

  nextNodeOf(_node: Address): IndexRegistry__nextNodeOfResult {
    let result = super.call(
      "nextNodeOf",
      "nextNodeOf(address):(address,uint256)",
      [ethereum.Value.fromAddress(_node)]
    );

    return new IndexRegistry__nextNodeOfResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_nextNodeOf(
    _node: Address
  ): ethereum.CallResult<IndexRegistry__nextNodeOfResult> {
    let result = super.tryCall(
      "nextNodeOf",
      "nextNodeOf(address):(address,uint256)",
      [ethereum.Value.fromAddress(_node)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IndexRegistry__nextNodeOfResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  top(_count: BigInt): IndexRegistry__topResult {
    let result = super.call(
      "top",
      "top(uint256):(address[],uint256[],uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_count)]
    );

    return new IndexRegistry__topResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_top(_count: BigInt): ethereum.CallResult<IndexRegistry__topResult> {
    let result = super.tryCall(
      "top",
      "top(uint256):(address[],uint256[],uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_count)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IndexRegistry__topResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  totalAssets(): BigInt {
    let result = super.call("totalAssets", "totalAssets():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalAssets", "totalAssets():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalFactories(): BigInt {
    let result = super.call("totalFactories", "totalFactories():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalFactories(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFactories",
      "totalFactories():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalMarketCap(): BigInt {
    let result = super.call("totalMarketCap", "totalMarketCap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalMarketCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalMarketCap",
      "totalMarketCap():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vault(): Address {
    let result = super.call("vault", "vault():(address)", []);

    return result[0].toAddress();
  }

  try_vault(): ethereum.CallResult<Address> {
    let result = super.tryCall("vault", "vault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAssetCall extends ethereum.Call {
  get inputs(): AddAssetCall__Inputs {
    return new AddAssetCall__Inputs(this);
  }

  get outputs(): AddAssetCall__Outputs {
    return new AddAssetCall__Outputs(this);
  }
}

export class AddAssetCall__Inputs {
  _call: AddAssetCall;

  constructor(call: AddAssetCall) {
    this._call = call;
  }

  get _prev(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _asset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _marketCap(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddAssetCall__Outputs {
  _call: AddAssetCall;

  constructor(call: AddAssetCall) {
    this._call = call;
  }
}

export class AddFactoryCall extends ethereum.Call {
  get inputs(): AddFactoryCall__Inputs {
    return new AddFactoryCall__Inputs(this);
  }

  get outputs(): AddFactoryCall__Outputs {
    return new AddFactoryCall__Outputs(this);
  }
}

export class AddFactoryCall__Inputs {
  _call: AddFactoryCall;

  constructor(call: AddFactoryCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddFactoryCall__Outputs {
  _call: AddFactoryCall;

  constructor(call: AddFactoryCall) {
    this._call = call;
  }
}

export class AddOracleCall extends ethereum.Call {
  get inputs(): AddOracleCall__Inputs {
    return new AddOracleCall__Inputs(this);
  }

  get outputs(): AddOracleCall__Outputs {
    return new AddOracleCall__Outputs(this);
  }
}

export class AddOracleCall__Inputs {
  _call: AddOracleCall;

  constructor(call: AddOracleCall) {
    this._call = call;
  }

  get _oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddOracleCall__Outputs {
  _call: AddOracleCall;

  constructor(call: AddOracleCall) {
    this._call = call;
  }
}

export class RegisterIndexCall extends ethereum.Call {
  get inputs(): RegisterIndexCall__Inputs {
    return new RegisterIndexCall__Inputs(this);
  }

  get outputs(): RegisterIndexCall__Outputs {
    return new RegisterIndexCall__Outputs(this);
  }
}

export class RegisterIndexCall__Inputs {
  _call: RegisterIndexCall;

  constructor(call: RegisterIndexCall) {
    this._call = call;
  }

  get _index(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _assets(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }
}

export class RegisterIndexCall__Outputs {
  _call: RegisterIndexCall;

  constructor(call: RegisterIndexCall) {
    this._call = call;
  }
}

export class RemoveAssetCall extends ethereum.Call {
  get inputs(): RemoveAssetCall__Inputs {
    return new RemoveAssetCall__Inputs(this);
  }

  get outputs(): RemoveAssetCall__Outputs {
    return new RemoveAssetCall__Outputs(this);
  }
}

export class RemoveAssetCall__Inputs {
  _call: RemoveAssetCall;

  constructor(call: RemoveAssetCall) {
    this._call = call;
  }

  get _prev(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _asset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveAssetCall__Outputs {
  _call: RemoveAssetCall;

  constructor(call: RemoveAssetCall) {
    this._call = call;
  }
}

export class RemoveFactoryCall extends ethereum.Call {
  get inputs(): RemoveFactoryCall__Inputs {
    return new RemoveFactoryCall__Inputs(this);
  }

  get outputs(): RemoveFactoryCall__Outputs {
    return new RemoveFactoryCall__Outputs(this);
  }
}

export class RemoveFactoryCall__Inputs {
  _call: RemoveFactoryCall;

  constructor(call: RemoveFactoryCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveFactoryCall__Outputs {
  _call: RemoveFactoryCall;

  constructor(call: RemoveFactoryCall) {
    this._call = call;
  }
}

export class RemoveOracleCall extends ethereum.Call {
  get inputs(): RemoveOracleCall__Inputs {
    return new RemoveOracleCall__Inputs(this);
  }

  get outputs(): RemoveOracleCall__Outputs {
    return new RemoveOracleCall__Outputs(this);
  }
}

export class RemoveOracleCall__Inputs {
  _call: RemoveOracleCall;

  constructor(call: RemoveOracleCall) {
    this._call = call;
  }

  get _oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveOracleCall__Outputs {
  _call: RemoveOracleCall;

  constructor(call: RemoveOracleCall) {
    this._call = call;
  }
}

export class SetIndexNameCall extends ethereum.Call {
  get inputs(): SetIndexNameCall__Inputs {
    return new SetIndexNameCall__Inputs(this);
  }

  get outputs(): SetIndexNameCall__Outputs {
    return new SetIndexNameCall__Outputs(this);
  }
}

export class SetIndexNameCall__Inputs {
  _call: SetIndexNameCall;

  constructor(call: SetIndexNameCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetIndexNameCall__Outputs {
  _call: SetIndexNameCall;

  constructor(call: SetIndexNameCall) {
    this._call = call;
  }
}

export class SetIndexSymbolCall extends ethereum.Call {
  get inputs(): SetIndexSymbolCall__Inputs {
    return new SetIndexSymbolCall__Inputs(this);
  }

  get outputs(): SetIndexSymbolCall__Outputs {
    return new SetIndexSymbolCall__Outputs(this);
  }
}

export class SetIndexSymbolCall__Inputs {
  _call: SetIndexSymbolCall;

  constructor(call: SetIndexSymbolCall) {
    this._call = call;
  }

  get _symbol(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetIndexSymbolCall__Outputs {
  _call: SetIndexSymbolCall;

  constructor(call: SetIndexSymbolCall) {
    this._call = call;
  }
}

export class UpdateAssetMarketCapCall extends ethereum.Call {
  get inputs(): UpdateAssetMarketCapCall__Inputs {
    return new UpdateAssetMarketCapCall__Inputs(this);
  }

  get outputs(): UpdateAssetMarketCapCall__Outputs {
    return new UpdateAssetMarketCapCall__Outputs(this);
  }
}

export class UpdateAssetMarketCapCall__Inputs {
  _call: UpdateAssetMarketCapCall;

  constructor(call: UpdateAssetMarketCapCall) {
    this._call = call;
  }

  get _srcPrev(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _asset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _dstPrev(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _marketCap(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateAssetMarketCapCall__Outputs {
  _call: UpdateAssetMarketCapCall;

  constructor(call: UpdateAssetMarketCapCall) {
    this._call = call;
  }
}
